
package com.ellucian.generated.eedm.purchase_orders.v11_1_0;

import java.util.ArrayList;
import java.util.List;
import javax.annotation.processing.Generated;
import com.ellucian.generated.eedm.academic_catalogs.v6_0.Metadata;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Purchase Orders
 * <p>
 * Commercial agreements with vendors for the purchasing of commodities.
 * 
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
    "metadata",
    "id",
    "type",
    "description",
    "orderNumber",
    "referenceNumbers",
    "paymentSource",
    "orderedOn",
    "transactionDate",
    "deliveredBy",
    "status",
    "statusDate",
    "buyer",
    "initiator",
    "shipping",
    "overrideShippingDestination",
    "shippingMethod",
    "vendor",
    "paymentTerms",
    "classification",
    "submittedBy",
    "comments",
    "lineItems"
})
@Generated("jsonschema2pojo")
public class PurchaseOrders {

    /**
     * Metadata
     * <p>
     * Metadata about the JSON payload
     * 
     */
    @JsonProperty("metadata")
    @JsonPropertyDescription("Metadata about the JSON payload")
    private Metadata metadata;
    /**
     * ID
     * <p>
     * The global identifier of the purchase order.
     * (Required)
     * 
     */
    @JsonProperty("id")
    @JsonPropertyDescription("The global identifier of the purchase order.")
    private String id;
    /**
     * Type
     * <p>
     * The type of purchase order, i.e. Procurement, eProcurement, or Travel.
     * 
     */
    @JsonProperty("type")
    @JsonPropertyDescription("The type of purchase order, i.e. Procurement, eProcurement, or Travel.")
    private Object type;
    /**
     * Description
     * <p>
     * The description of the purchase order.
     * 
     */
    @JsonProperty("description")
    @JsonPropertyDescription("The description of the purchase order.")
    private String description;
    /**
     * Order Number
     * <p>
     * The order number generated by the finance system.
     * 
     */
    @JsonProperty("orderNumber")
    @JsonPropertyDescription("The order number generated by the finance system.")
    private String orderNumber;
    /**
     * Reference Numbers
     * <p>
     * A reference number which represents the originating system's source document.
     * 
     */
    @JsonProperty("referenceNumbers")
    @JsonPropertyDescription("A reference number which represents the originating system's source document.")
    private List<String> referenceNumbers = new ArrayList<String>();
    /**
     * Payment Source
     * <p>
     * The source account for the purchase order
     * 
     */
    @JsonProperty("paymentSource")
    @JsonPropertyDescription("The source account for the purchase order")
    private Object paymentSource;
    /**
     * Ordered On
     * <p>
     * The date the purchase order was created.
     * (Required)
     * 
     */
    @JsonProperty("orderedOn")
    @JsonPropertyDescription("The date the purchase order was created.")
    private String orderedOn;
    /**
     * Transaction Date
     * <p>
     * The transaction date for the purchase order. This will be the date used when entering the transactions into the general ledger.
     * (Required)
     * 
     */
    @JsonProperty("transactionDate")
    @JsonPropertyDescription("The transaction date for the purchase order. This will be the date used when entering the transactions into the general ledger.")
    private String transactionDate;
    /**
     * Delivered By
     * <p>
     * The expected delivery date for the purchase order.
     * 
     */
    @JsonProperty("deliveredBy")
    @JsonPropertyDescription("The expected delivery date for the purchase order.")
    private Object deliveredBy;
    /**
     * Status
     * <p>
     * The status of the purchase order.
     * 
     */
    @JsonProperty("status")
    @JsonPropertyDescription("The status of the purchase order.")
    private Object status;
    /**
     * Status Date
     * <p>
     * The date associated with the purchase order's status.
     * 
     */
    @JsonProperty("statusDate")
    @JsonPropertyDescription("The date associated with the purchase order's status.")
    private Object statusDate;
    /**
     * Buyer
     * <p>
     * The buyer associated with the purchase order.
     * 
     */
    @JsonProperty("buyer")
    @JsonPropertyDescription("The buyer associated with the purchase order.")
    private Object buyer;
    /**
     * Initiator
     * <p>
     * The initiator of the purchase order.
     * 
     */
    @JsonProperty("initiator")
    @JsonPropertyDescription("The initiator of the purchase order.")
    private Object initiator;
    /**
     * Shipping
     * <p>
     * The shipping information associated with the purchase order.
     * 
     */
    @JsonProperty("shipping")
    @JsonPropertyDescription("The shipping information associated with the purchase order.")
    private Shipping shipping;
    /**
     * Override Shipping Destination
     * <p>
     * Override of the shipping information specified in the ship to destination.
     * 
     */
    @JsonProperty("overrideShippingDestination")
    @JsonPropertyDescription("Override of the shipping information specified in the ship to destination.")
    private OverrideShippingDestination overrideShippingDestination;
    /**
     * Shipping Method
     * <p>
     * The shipping method for the purchase order (e.g. ground, air, UPS, Purolator).
     * 
     */
    @JsonProperty("shippingMethod")
    @JsonPropertyDescription("The shipping method for the purchase order (e.g. ground, air, UPS, Purolator).")
    private Object shippingMethod;
    /**
     * Vendor
     * <p>
     * The vendor associated with the purchase order.
     * (Required)
     * 
     */
    @JsonProperty("vendor")
    @JsonPropertyDescription("The vendor associated with the purchase order.")
    private Vendor vendor;
    /**
     * Payment Terms
     * <p>
     * The vendor payment terms and conditions that are applicable to the purchase order.
     * 
     */
    @JsonProperty("paymentTerms")
    @JsonPropertyDescription("The vendor payment terms and conditions that are applicable to the purchase order.")
    private Object paymentTerms;
    /**
     * Classification
     * <p>
     * A user defined classification of the purchase order.
     * 
     */
    @JsonProperty("classification")
    @JsonPropertyDescription("A user defined classification of the purchase order.")
    private Object classification;
    /**
     * Submitted By
     * <p>
     * The person who made the submit request for the purchase order.
     * 
     */
    @JsonProperty("submittedBy")
    @JsonPropertyDescription("The person who made the submit request for the purchase order.")
    private Object submittedBy;
    /**
     * Comments
     * <p>
     * The comments associated with the purchase order.
     * 
     */
    @JsonProperty("comments")
    @JsonPropertyDescription("The comments associated with the purchase order.")
    private List<Comment> comments = new ArrayList<Comment>();
    /**
     * Line Items
     * <p>
     * The line items associated with the purchase order.
     * (Required)
     * 
     */
    @JsonProperty("lineItems")
    @JsonPropertyDescription("The line items associated with the purchase order.")
    private List<LineItem> lineItems = new ArrayList<LineItem>();

    /**
     * Metadata
     * <p>
     * Metadata about the JSON payload
     * 
     */
    @JsonProperty("metadata")
    public Metadata getMetadata() {
        return metadata;
    }

    /**
     * Metadata
     * <p>
     * Metadata about the JSON payload
     * 
     */
    @JsonProperty("metadata")
    public void setMetadata(Metadata metadata) {
        this.metadata = metadata;
    }

    public PurchaseOrders withMetadata(Metadata metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * ID
     * <p>
     * The global identifier of the purchase order.
     * (Required)
     * 
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * ID
     * <p>
     * The global identifier of the purchase order.
     * (Required)
     * 
     */
    @JsonProperty("id")
    public void setId(String id) {
        this.id = id;
    }

    public PurchaseOrders withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Type
     * <p>
     * The type of purchase order, i.e. Procurement, eProcurement, or Travel.
     * 
     */
    @JsonProperty("type")
    public Object getType() {
        return type;
    }

    /**
     * Type
     * <p>
     * The type of purchase order, i.e. Procurement, eProcurement, or Travel.
     * 
     */
    @JsonProperty("type")
    public void setType(Object type) {
        this.type = type;
    }

    public PurchaseOrders withType(Object type) {
        this.type = type;
        return this;
    }

    /**
     * Description
     * <p>
     * The description of the purchase order.
     * 
     */
    @JsonProperty("description")
    public String getDescription() {
        return description;
    }

    /**
     * Description
     * <p>
     * The description of the purchase order.
     * 
     */
    @JsonProperty("description")
    public void setDescription(String description) {
        this.description = description;
    }

    public PurchaseOrders withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Order Number
     * <p>
     * The order number generated by the finance system.
     * 
     */
    @JsonProperty("orderNumber")
    public String getOrderNumber() {
        return orderNumber;
    }

    /**
     * Order Number
     * <p>
     * The order number generated by the finance system.
     * 
     */
    @JsonProperty("orderNumber")
    public void setOrderNumber(String orderNumber) {
        this.orderNumber = orderNumber;
    }

    public PurchaseOrders withOrderNumber(String orderNumber) {
        this.orderNumber = orderNumber;
        return this;
    }

    /**
     * Reference Numbers
     * <p>
     * A reference number which represents the originating system's source document.
     * 
     */
    @JsonProperty("referenceNumbers")
    public List<String> getReferenceNumbers() {
        return referenceNumbers;
    }

    /**
     * Reference Numbers
     * <p>
     * A reference number which represents the originating system's source document.
     * 
     */
    @JsonProperty("referenceNumbers")
    public void setReferenceNumbers(List<String> referenceNumbers) {
        this.referenceNumbers = referenceNumbers;
    }

    public PurchaseOrders withReferenceNumbers(List<String> referenceNumbers) {
        this.referenceNumbers = referenceNumbers;
        return this;
    }

    /**
     * Payment Source
     * <p>
     * The source account for the purchase order
     * 
     */
    @JsonProperty("paymentSource")
    public Object getPaymentSource() {
        return paymentSource;
    }

    /**
     * Payment Source
     * <p>
     * The source account for the purchase order
     * 
     */
    @JsonProperty("paymentSource")
    public void setPaymentSource(Object paymentSource) {
        this.paymentSource = paymentSource;
    }

    public PurchaseOrders withPaymentSource(Object paymentSource) {
        this.paymentSource = paymentSource;
        return this;
    }

    /**
     * Ordered On
     * <p>
     * The date the purchase order was created.
     * (Required)
     * 
     */
    @JsonProperty("orderedOn")
    public String getOrderedOn() {
        return orderedOn;
    }

    /**
     * Ordered On
     * <p>
     * The date the purchase order was created.
     * (Required)
     * 
     */
    @JsonProperty("orderedOn")
    public void setOrderedOn(String orderedOn) {
        this.orderedOn = orderedOn;
    }

    public PurchaseOrders withOrderedOn(String orderedOn) {
        this.orderedOn = orderedOn;
        return this;
    }

    /**
     * Transaction Date
     * <p>
     * The transaction date for the purchase order. This will be the date used when entering the transactions into the general ledger.
     * (Required)
     * 
     */
    @JsonProperty("transactionDate")
    public String getTransactionDate() {
        return transactionDate;
    }

    /**
     * Transaction Date
     * <p>
     * The transaction date for the purchase order. This will be the date used when entering the transactions into the general ledger.
     * (Required)
     * 
     */
    @JsonProperty("transactionDate")
    public void setTransactionDate(String transactionDate) {
        this.transactionDate = transactionDate;
    }

    public PurchaseOrders withTransactionDate(String transactionDate) {
        this.transactionDate = transactionDate;
        return this;
    }

    /**
     * Delivered By
     * <p>
     * The expected delivery date for the purchase order.
     * 
     */
    @JsonProperty("deliveredBy")
    public Object getDeliveredBy() {
        return deliveredBy;
    }

    /**
     * Delivered By
     * <p>
     * The expected delivery date for the purchase order.
     * 
     */
    @JsonProperty("deliveredBy")
    public void setDeliveredBy(Object deliveredBy) {
        this.deliveredBy = deliveredBy;
    }

    public PurchaseOrders withDeliveredBy(Object deliveredBy) {
        this.deliveredBy = deliveredBy;
        return this;
    }

    /**
     * Status
     * <p>
     * The status of the purchase order.
     * 
     */
    @JsonProperty("status")
    public Object getStatus() {
        return status;
    }

    /**
     * Status
     * <p>
     * The status of the purchase order.
     * 
     */
    @JsonProperty("status")
    public void setStatus(Object status) {
        this.status = status;
    }

    public PurchaseOrders withStatus(Object status) {
        this.status = status;
        return this;
    }

    /**
     * Status Date
     * <p>
     * The date associated with the purchase order's status.
     * 
     */
    @JsonProperty("statusDate")
    public Object getStatusDate() {
        return statusDate;
    }

    /**
     * Status Date
     * <p>
     * The date associated with the purchase order's status.
     * 
     */
    @JsonProperty("statusDate")
    public void setStatusDate(Object statusDate) {
        this.statusDate = statusDate;
    }

    public PurchaseOrders withStatusDate(Object statusDate) {
        this.statusDate = statusDate;
        return this;
    }

    /**
     * Buyer
     * <p>
     * The buyer associated with the purchase order.
     * 
     */
    @JsonProperty("buyer")
    public Object getBuyer() {
        return buyer;
    }

    /**
     * Buyer
     * <p>
     * The buyer associated with the purchase order.
     * 
     */
    @JsonProperty("buyer")
    public void setBuyer(Object buyer) {
        this.buyer = buyer;
    }

    public PurchaseOrders withBuyer(Object buyer) {
        this.buyer = buyer;
        return this;
    }

    /**
     * Initiator
     * <p>
     * The initiator of the purchase order.
     * 
     */
    @JsonProperty("initiator")
    public Object getInitiator() {
        return initiator;
    }

    /**
     * Initiator
     * <p>
     * The initiator of the purchase order.
     * 
     */
    @JsonProperty("initiator")
    public void setInitiator(Object initiator) {
        this.initiator = initiator;
    }

    public PurchaseOrders withInitiator(Object initiator) {
        this.initiator = initiator;
        return this;
    }

    /**
     * Shipping
     * <p>
     * The shipping information associated with the purchase order.
     * 
     */
    @JsonProperty("shipping")
    public Shipping getShipping() {
        return shipping;
    }

    /**
     * Shipping
     * <p>
     * The shipping information associated with the purchase order.
     * 
     */
    @JsonProperty("shipping")
    public void setShipping(Shipping shipping) {
        this.shipping = shipping;
    }

    public PurchaseOrders withShipping(Shipping shipping) {
        this.shipping = shipping;
        return this;
    }

    /**
     * Override Shipping Destination
     * <p>
     * Override of the shipping information specified in the ship to destination.
     * 
     */
    @JsonProperty("overrideShippingDestination")
    public OverrideShippingDestination getOverrideShippingDestination() {
        return overrideShippingDestination;
    }

    /**
     * Override Shipping Destination
     * <p>
     * Override of the shipping information specified in the ship to destination.
     * 
     */
    @JsonProperty("overrideShippingDestination")
    public void setOverrideShippingDestination(OverrideShippingDestination overrideShippingDestination) {
        this.overrideShippingDestination = overrideShippingDestination;
    }

    public PurchaseOrders withOverrideShippingDestination(OverrideShippingDestination overrideShippingDestination) {
        this.overrideShippingDestination = overrideShippingDestination;
        return this;
    }

    /**
     * Shipping Method
     * <p>
     * The shipping method for the purchase order (e.g. ground, air, UPS, Purolator).
     * 
     */
    @JsonProperty("shippingMethod")
    public Object getShippingMethod() {
        return shippingMethod;
    }

    /**
     * Shipping Method
     * <p>
     * The shipping method for the purchase order (e.g. ground, air, UPS, Purolator).
     * 
     */
    @JsonProperty("shippingMethod")
    public void setShippingMethod(Object shippingMethod) {
        this.shippingMethod = shippingMethod;
    }

    public PurchaseOrders withShippingMethod(Object shippingMethod) {
        this.shippingMethod = shippingMethod;
        return this;
    }

    /**
     * Vendor
     * <p>
     * The vendor associated with the purchase order.
     * (Required)
     * 
     */
    @JsonProperty("vendor")
    public Vendor getVendor() {
        return vendor;
    }

    /**
     * Vendor
     * <p>
     * The vendor associated with the purchase order.
     * (Required)
     * 
     */
    @JsonProperty("vendor")
    public void setVendor(Vendor vendor) {
        this.vendor = vendor;
    }

    public PurchaseOrders withVendor(Vendor vendor) {
        this.vendor = vendor;
        return this;
    }

    /**
     * Payment Terms
     * <p>
     * The vendor payment terms and conditions that are applicable to the purchase order.
     * 
     */
    @JsonProperty("paymentTerms")
    public Object getPaymentTerms() {
        return paymentTerms;
    }

    /**
     * Payment Terms
     * <p>
     * The vendor payment terms and conditions that are applicable to the purchase order.
     * 
     */
    @JsonProperty("paymentTerms")
    public void setPaymentTerms(Object paymentTerms) {
        this.paymentTerms = paymentTerms;
    }

    public PurchaseOrders withPaymentTerms(Object paymentTerms) {
        this.paymentTerms = paymentTerms;
        return this;
    }

    /**
     * Classification
     * <p>
     * A user defined classification of the purchase order.
     * 
     */
    @JsonProperty("classification")
    public Object getClassification() {
        return classification;
    }

    /**
     * Classification
     * <p>
     * A user defined classification of the purchase order.
     * 
     */
    @JsonProperty("classification")
    public void setClassification(Object classification) {
        this.classification = classification;
    }

    public PurchaseOrders withClassification(Object classification) {
        this.classification = classification;
        return this;
    }

    /**
     * Submitted By
     * <p>
     * The person who made the submit request for the purchase order.
     * 
     */
    @JsonProperty("submittedBy")
    public Object getSubmittedBy() {
        return submittedBy;
    }

    /**
     * Submitted By
     * <p>
     * The person who made the submit request for the purchase order.
     * 
     */
    @JsonProperty("submittedBy")
    public void setSubmittedBy(Object submittedBy) {
        this.submittedBy = submittedBy;
    }

    public PurchaseOrders withSubmittedBy(Object submittedBy) {
        this.submittedBy = submittedBy;
        return this;
    }

    /**
     * Comments
     * <p>
     * The comments associated with the purchase order.
     * 
     */
    @JsonProperty("comments")
    public List<Comment> getComments() {
        return comments;
    }

    /**
     * Comments
     * <p>
     * The comments associated with the purchase order.
     * 
     */
    @JsonProperty("comments")
    public void setComments(List<Comment> comments) {
        this.comments = comments;
    }

    public PurchaseOrders withComments(List<Comment> comments) {
        this.comments = comments;
        return this;
    }

    /**
     * Line Items
     * <p>
     * The line items associated with the purchase order.
     * (Required)
     * 
     */
    @JsonProperty("lineItems")
    public List<LineItem> getLineItems() {
        return lineItems;
    }

    /**
     * Line Items
     * <p>
     * The line items associated with the purchase order.
     * (Required)
     * 
     */
    @JsonProperty("lineItems")
    public void setLineItems(List<LineItem> lineItems) {
        this.lineItems = lineItems;
    }

    public PurchaseOrders withLineItems(List<LineItem> lineItems) {
        this.lineItems = lineItems;
        return this;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(PurchaseOrders.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');
        sb.append("metadata");
        sb.append('=');
        sb.append(((this.metadata == null)?"<null>":this.metadata));
        sb.append(',');
        sb.append("id");
        sb.append('=');
        sb.append(((this.id == null)?"<null>":this.id));
        sb.append(',');
        sb.append("type");
        sb.append('=');
        sb.append(((this.type == null)?"<null>":this.type));
        sb.append(',');
        sb.append("description");
        sb.append('=');
        sb.append(((this.description == null)?"<null>":this.description));
        sb.append(',');
        sb.append("orderNumber");
        sb.append('=');
        sb.append(((this.orderNumber == null)?"<null>":this.orderNumber));
        sb.append(',');
        sb.append("referenceNumbers");
        sb.append('=');
        sb.append(((this.referenceNumbers == null)?"<null>":this.referenceNumbers));
        sb.append(',');
        sb.append("paymentSource");
        sb.append('=');
        sb.append(((this.paymentSource == null)?"<null>":this.paymentSource));
        sb.append(',');
        sb.append("orderedOn");
        sb.append('=');
        sb.append(((this.orderedOn == null)?"<null>":this.orderedOn));
        sb.append(',');
        sb.append("transactionDate");
        sb.append('=');
        sb.append(((this.transactionDate == null)?"<null>":this.transactionDate));
        sb.append(',');
        sb.append("deliveredBy");
        sb.append('=');
        sb.append(((this.deliveredBy == null)?"<null>":this.deliveredBy));
        sb.append(',');
        sb.append("status");
        sb.append('=');
        sb.append(((this.status == null)?"<null>":this.status));
        sb.append(',');
        sb.append("statusDate");
        sb.append('=');
        sb.append(((this.statusDate == null)?"<null>":this.statusDate));
        sb.append(',');
        sb.append("buyer");
        sb.append('=');
        sb.append(((this.buyer == null)?"<null>":this.buyer));
        sb.append(',');
        sb.append("initiator");
        sb.append('=');
        sb.append(((this.initiator == null)?"<null>":this.initiator));
        sb.append(',');
        sb.append("shipping");
        sb.append('=');
        sb.append(((this.shipping == null)?"<null>":this.shipping));
        sb.append(',');
        sb.append("overrideShippingDestination");
        sb.append('=');
        sb.append(((this.overrideShippingDestination == null)?"<null>":this.overrideShippingDestination));
        sb.append(',');
        sb.append("shippingMethod");
        sb.append('=');
        sb.append(((this.shippingMethod == null)?"<null>":this.shippingMethod));
        sb.append(',');
        sb.append("vendor");
        sb.append('=');
        sb.append(((this.vendor == null)?"<null>":this.vendor));
        sb.append(',');
        sb.append("paymentTerms");
        sb.append('=');
        sb.append(((this.paymentTerms == null)?"<null>":this.paymentTerms));
        sb.append(',');
        sb.append("classification");
        sb.append('=');
        sb.append(((this.classification == null)?"<null>":this.classification));
        sb.append(',');
        sb.append("submittedBy");
        sb.append('=');
        sb.append(((this.submittedBy == null)?"<null>":this.submittedBy));
        sb.append(',');
        sb.append("comments");
        sb.append('=');
        sb.append(((this.comments == null)?"<null>":this.comments));
        sb.append(',');
        sb.append("lineItems");
        sb.append('=');
        sb.append(((this.lineItems == null)?"<null>":this.lineItems));
        sb.append(',');
        if (sb.charAt((sb.length()- 1)) == ',') {
            sb.setCharAt((sb.length()- 1), ']');
        } else {
            sb.append(']');
        }
        return sb.toString();
    }

    @Override
    public int hashCode() {
        int result = 1;
        result = ((result* 31)+((this.statusDate == null)? 0 :this.statusDate.hashCode()));
        result = ((result* 31)+((this.submittedBy == null)? 0 :this.submittedBy.hashCode()));
        result = ((result* 31)+((this.metadata == null)? 0 :this.metadata.hashCode()));
        result = ((result* 31)+((this.orderNumber == null)? 0 :this.orderNumber.hashCode()));
        result = ((result* 31)+((this.deliveredBy == null)? 0 :this.deliveredBy.hashCode()));
        result = ((result* 31)+((this.comments == null)? 0 :this.comments.hashCode()));
        result = ((result* 31)+((this.initiator == null)? 0 :this.initiator.hashCode()));
        result = ((result* 31)+((this.shippingMethod == null)? 0 :this.shippingMethod.hashCode()));
        result = ((result* 31)+((this.paymentSource == null)? 0 :this.paymentSource.hashCode()));
        result = ((result* 31)+((this.description == null)? 0 :this.description.hashCode()));
        result = ((result* 31)+((this.type == null)? 0 :this.type.hashCode()));
        result = ((result* 31)+((this.transactionDate == null)? 0 :this.transactionDate.hashCode()));
        result = ((result* 31)+((this.classification == null)? 0 :this.classification.hashCode()));
        result = ((result* 31)+((this.buyer == null)? 0 :this.buyer.hashCode()));
        result = ((result* 31)+((this.lineItems == null)? 0 :this.lineItems.hashCode()));
        result = ((result* 31)+((this.overrideShippingDestination == null)? 0 :this.overrideShippingDestination.hashCode()));
        result = ((result* 31)+((this.shipping == null)? 0 :this.shipping.hashCode()));
        result = ((result* 31)+((this.vendor == null)? 0 :this.vendor.hashCode()));
        result = ((result* 31)+((this.id == null)? 0 :this.id.hashCode()));
        result = ((result* 31)+((this.referenceNumbers == null)? 0 :this.referenceNumbers.hashCode()));
        result = ((result* 31)+((this.orderedOn == null)? 0 :this.orderedOn.hashCode()));
        result = ((result* 31)+((this.paymentTerms == null)? 0 :this.paymentTerms.hashCode()));
        result = ((result* 31)+((this.status == null)? 0 :this.status.hashCode()));
        return result;
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof PurchaseOrders) == false) {
            return false;
        }
        PurchaseOrders rhs = ((PurchaseOrders) other);
        return ((((((((((((((((((((((((this.statusDate == rhs.statusDate)||((this.statusDate!= null)&&this.statusDate.equals(rhs.statusDate)))&&((this.submittedBy == rhs.submittedBy)||((this.submittedBy!= null)&&this.submittedBy.equals(rhs.submittedBy))))&&((this.metadata == rhs.metadata)||((this.metadata!= null)&&this.metadata.equals(rhs.metadata))))&&((this.orderNumber == rhs.orderNumber)||((this.orderNumber!= null)&&this.orderNumber.equals(rhs.orderNumber))))&&((this.deliveredBy == rhs.deliveredBy)||((this.deliveredBy!= null)&&this.deliveredBy.equals(rhs.deliveredBy))))&&((this.comments == rhs.comments)||((this.comments!= null)&&this.comments.equals(rhs.comments))))&&((this.initiator == rhs.initiator)||((this.initiator!= null)&&this.initiator.equals(rhs.initiator))))&&((this.shippingMethod == rhs.shippingMethod)||((this.shippingMethod!= null)&&this.shippingMethod.equals(rhs.shippingMethod))))&&((this.paymentSource == rhs.paymentSource)||((this.paymentSource!= null)&&this.paymentSource.equals(rhs.paymentSource))))&&((this.description == rhs.description)||((this.description!= null)&&this.description.equals(rhs.description))))&&((this.type == rhs.type)||((this.type!= null)&&this.type.equals(rhs.type))))&&((this.transactionDate == rhs.transactionDate)||((this.transactionDate!= null)&&this.transactionDate.equals(rhs.transactionDate))))&&((this.classification == rhs.classification)||((this.classification!= null)&&this.classification.equals(rhs.classification))))&&((this.buyer == rhs.buyer)||((this.buyer!= null)&&this.buyer.equals(rhs.buyer))))&&((this.lineItems == rhs.lineItems)||((this.lineItems!= null)&&this.lineItems.equals(rhs.lineItems))))&&((this.overrideShippingDestination == rhs.overrideShippingDestination)||((this.overrideShippingDestination!= null)&&this.overrideShippingDestination.equals(rhs.overrideShippingDestination))))&&((this.shipping == rhs.shipping)||((this.shipping!= null)&&this.shipping.equals(rhs.shipping))))&&((this.vendor == rhs.vendor)||((this.vendor!= null)&&this.vendor.equals(rhs.vendor))))&&((this.id == rhs.id)||((this.id!= null)&&this.id.equals(rhs.id))))&&((this.referenceNumbers == rhs.referenceNumbers)||((this.referenceNumbers!= null)&&this.referenceNumbers.equals(rhs.referenceNumbers))))&&((this.orderedOn == rhs.orderedOn)||((this.orderedOn!= null)&&this.orderedOn.equals(rhs.orderedOn))))&&((this.paymentTerms == rhs.paymentTerms)||((this.paymentTerms!= null)&&this.paymentTerms.equals(rhs.paymentTerms))))&&((this.status == rhs.status)||((this.status!= null)&&this.status.equals(rhs.status))));
    }

}
